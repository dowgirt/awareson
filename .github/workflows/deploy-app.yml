name: CI/CD Pipeline

on:
  workflow_dispatch:

env:
  ACR_SERVER_NAME: acrawaresondev
  APP_SERVICE_NAME: app-awareson-dev
  RESOURCE_GROUP: awareson-dev-plc-rg
  KEYVAULT_NAME: kv-awareson-dev
  DB_NAME: db1
  DB_SERVER: sql-awareson-dev.database.windows.net

jobs:
  db-connection-test:
    runs-on: ubuntu-latest
    environment: dev
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get secrets from Azure Key Vault
        id: get-secrets
        run: |
          echo "DB_USER=$(az keyvault secret show --vault-name ${{ env.KEYVAULT_NAME }} --name sql-server-admin-username --query value -o tsv)" >> $GITHUB_ENV
          echo "DB_PASSWORD=$(az keyvault secret show --vault-name ${{ env.KEYVAULT_NAME }}  --name sql-server-admin-password --query value -o tsv)" >> $GITHUB_ENV

      - name: Install mssql package locally
        run: npm install mssql

      - name: Run DB connection test
        run: |
          node -e "
          const sql = require('mssql');
          (async () => {
            try {
              const config = {
                user: process.env.DB_USER,
                password: process.env.DB_PASSWORD,
                server: process.env.DB_SERVER,
                database: process.env.DB_NAME,
                options: { encrypt: true }
              };
              const pool = await sql.connect(config);
              console.log('DB connection successful');
              await pool.close();
              process.exit(0);
            } catch (err) {
              console.error('DB connection failed:', err);
              process.exit(1);
            }
          })();
          "

  terraform-plan:
    runs-on: ubuntu-latest
    needs: db-connection-test    
    environment: dev
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

  terraform-apply:
    runs-on: ubuntu-latest
    needs: terraform-plan
    environment: dev
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve
